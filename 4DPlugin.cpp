/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Sleep Notification 
 #	author : miyako
 #	2016/01/28
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#pragma mark -

@interface Listener : NSObject
{

}
- (id)init;
- (void)dealloc;
- (void)willSleep:(NSNotification *)notification;
- (void)didWake:(NSNotification *)notification;
- (void)screensDidSleep:(NSNotification *)notification;
- (void)screensDidWake:(NSNotification *)notification;
- (void)willPowerOff:(NSNotification *)notification;
- (void)call:(event_id_t)event;
@end

namespace SN
{
    Listener *listener = nil;
				
    process_name_t MONITOR_PROCESS_NAME = (PA_Unichar *)"$\0S\0L\0E\0E\0P\0_\0N\0O\0T\0I\0F\0I\0C\0A\0T\0I\0O\0N\0\0\0";
				process_number_t MONITOR_PROCESS_ID = 0;
    process_stack_size_t MONITOR_PROCESS_STACK_SIZE = 0;
    method_id_t CALLBACK_METHOD_ID = 0;
				event_id_t CALLBACK_EVENT_ID = 0;
				C_TEXT LISTENER_METHOD;
				bool MONITOR_PROCESS_SHOULD_TERMINATE;
				std::vector<event_id_t>CALLBACK_EVENT_IDS;
}

@implementation Listener

- (id)init
{
	if(!(self = [super init])) return self;
		
				NSNotificationCenter *center = [[NSWorkspace sharedWorkspace]notificationCenter];
		
				[center
								addObserver:self
								selector: @selector(willSleep:)
								name:NSWorkspaceWillSleepNotification 
								object:nil];

				[center
								addObserver:self
								selector: @selector(didWake:)
								name:NSWorkspaceDidWakeNotification 
								object:nil];
				
				[center
								addObserver:self
								selector: @selector(screensDidSleep:)
								name:NSWorkspaceScreensDidSleepNotification
								object:nil];
				
				[center
								addObserver:self
								selector: @selector(screensDidWake:)
								name:NSWorkspaceScreensDidWakeNotification
								object:nil];
				
				[center
								addObserver:self
								selector: @selector(willPowerOff:)
								name:NSWorkspaceWillPowerOffNotification
								object:nil];
    
	return self;
}
- (void)dealloc
{
    [[[NSWorkspace sharedWorkspace] notificationCenter]removeObserver:self];
				SN::CALLBACK_EVENT_IDS.clear();
    [super dealloc];
}
- (void)didWake:(NSNotification *)notification
{
				[self call:1];
}
- (void)willSleep:(NSNotification *)notification
{
				[self call:2];
}
- (void)willPowerOff:(NSNotification *)notification
{
				[self call:3];
}
- (void)screensDidWake:(NSNotification *)notification
{
				[self call:4];
}
- (void)screensDidSleep:(NSNotification *)notification
{
				[self call:5];
}

- (void)call:(event_id_t)event
{
				SN::CALLBACK_EVENT_ID = event;
				SN::CALLBACK_EVENT_IDS.push_back(SN::CALLBACK_EVENT_ID);
    PA_UnfreezeProcess(SN::MONITOR_PROCESS_ID);
}

@end

#pragma mark -

void generateUuid(C_TEXT &returnValue)
{
#if __MAC_OS_X_VERSION_MAX_ALLOWED >= 1080
    returnValue.setUTF16String([[[NSUUID UUID]UUIDString]stringByReplacingOccurrencesOfString:@"-" withString:@""]);
#else
    CFUUIDRef uuid = CFUUIDCreate(kCFAllocatorDefault);
    NSString *uuid_str = (NSString *)CFUUIDCreateString(kCFAllocatorDefault, uuid);
    returnValue.setUTF16String([uuid_str stringByReplacingOccurrencesOfString:@"-" withString:@""]);
#endif
}

NSString *copyDictionaryString(NSDictionary *d)
{
	NSString *s = nil;
	
	if(d)
	{
		CFPropertyListRef dPropertyList = 
		CFPropertyListCreateDeepCopy(kCFAllocatorDefault, 
									 (CFDictionaryRef)d, 
									 kCFPropertyListImmutable);
		if(dPropertyList)
		{
			NSData *dPropertyListData = 
			(NSData *)CFPropertyListCreateXMLData(kCFAllocatorDefault, 
												  dPropertyList);
			
			if(dPropertyListData)
			{
				NSString *dPropertyListXML = 
				[[NSString alloc]initWithData:dPropertyListData 
									 encoding:NSUTF8StringEncoding];
				
				if(dPropertyListXML)
				{
					s = dPropertyListXML;
				}
				
				[dPropertyListData release];
			}
			CFRelease(dPropertyList);	
		}
	}
	return s;
}

#pragma mark -

bool IsProcessOnExit()
{
    C_TEXT name;
    PA_long32 state, time;
    PA_GetProcessInfo(PA_GetCurrentProcessNumber(), name, &state, &time);
    CUTF16String procName(name.getUTF16StringPtr());
    CUTF16String exitProcName((PA_Unichar *)"$\0x\0x\0\0\0");
    return (!procName.compare(exitProcName));
}

void OnStartup()
{

}

void OnCloseProcess()
{
    if(IsProcessOnExit())
				{
        PA_RunInMainProcess((PA_RunInMainProcessProcPtr)listenerLoopFinish, NULL); 
    }
}

#pragma mark -

void listenerLoop()
{
    SN::MONITOR_PROCESS_SHOULD_TERMINATE = false;
        
    while(!SN::MONITOR_PROCESS_SHOULD_TERMINATE)
    {
								PA_YieldAbsolute();
								while(SN::CALLBACK_EVENT_IDS.size())
								{
												PA_YieldAbsolute();
            C_TEXT processName;
            generateUuid(processName);
            PA_NewProcess((void *)listenerLoopExecute,
                          SN::MONITOR_PROCESS_STACK_SIZE,
                          (PA_Unichar *)processName.getUTF16StringPtr());
												
												if(SN::MONITOR_PROCESS_SHOULD_TERMINATE)
																break;
								}

        if(!SN::MONITOR_PROCESS_SHOULD_TERMINATE){
            PA_FreezeProcess(PA_GetCurrentProcessNumber());  
        }else{
            SN::MONITOR_PROCESS_ID = 0;
        }
    }
    PA_KillProcess();
}

void listenerLoopStart()
{
    if(!SN::MONITOR_PROCESS_ID)
				{
        SN::listener = [[Listener alloc]init];
        SN::MONITOR_PROCESS_ID = PA_NewProcess((void *)listenerLoop, SN::MONITOR_PROCESS_STACK_SIZE, SN::MONITOR_PROCESS_NAME);
    }
}

void listenerLoopFinish()
{
    if(SN::MONITOR_PROCESS_ID)
				{
        //set flags
        SN::MONITOR_PROCESS_SHOULD_TERMINATE = true;
        PA_YieldAbsolute();
								SN::LISTENER_METHOD.setUTF16String((PA_Unichar *)"\0\0", 0);
								SN::CALLBACK_METHOD_ID = 0;
								[SN::listener release];
								SN::listener = nil;
        //tell listener to die      
//        while(SN::MONITOR_PROCESS_ID)
//								{
//            PA_YieldAbsolute();
            PA_UnfreezeProcess(SN::MONITOR_PROCESS_ID);
//        }
    }
}

void listenerLoopExecute()
{
				std::vector<event_id_t>::iterator e = SN::CALLBACK_EVENT_IDS.begin();
				event_id_t event = (*e) - 1;

    if(SN::CALLBACK_METHOD_ID)
				{
        PA_Variable	params[1];
        params[0] = PA_CreateVariable(eVK_Longint);
								PA_SetLongintVariable(&params[0], event);
								//the method could be paused or traced
								SN::CALLBACK_EVENT_IDS.erase(e);
        PA_ExecuteMethodByID(SN::CALLBACK_METHOD_ID, params, 1);
        PA_ClearVariable(&params[0]);
    }else{
								//the method could have been removed
								SN::CALLBACK_EVENT_IDS.erase(e);
				}
}

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
        case kInitPlugin :
        case kServerInitPlugin :
            OnStartup();
            break;
            
        case kCloseProcess :
            OnCloseProcess();
            break;
// --- Notification

		case 1 :
			SN_Set_sleep_method(pResult, pParams);
			break;

		case 2 :
			SN_Get_sleep_method(pResult, pParams);
			break;

// --- Information

		case 3 :
			Get_battery_warning_level(pResult, pParams);
			break;

		case 4 :
			GET_POWER_INFORMATION(pResult, pParams);
			break;

	}
}

// --------------------------------- Notification ---------------------------------


void SN_Set_sleep_method(sLONG_PTR *pResult, PackagePtr pParams)
{
				C_TEXT Param1;
				C_LONGINT returnValue;

				Param1.fromParamAtIndex(pParams, 1);
	
				NSString *methodName = Param1.copyUTF16String();
	
				if(!Param1.getUTF16Length())
				{
								//empty string passed
								returnValue.setIntValue(1);
								if(SN::LISTENER_METHOD.getUTF16Length())
								{
												PA_RunInMainProcess((PA_RunInMainProcessProcPtr)listenerLoopFinish, NULL);
								}
		
				}else
				{
								int methodId = PA_GetMethodID((PA_Unichar *)Param1.getUTF16StringPtr());
								if(methodId)
								{
												returnValue.setIntValue(1);
            if(methodId != SN::CALLBACK_METHOD_ID)
												{
                SN::LISTENER_METHOD.setUTF16String(Param1.getUTF16StringPtr(), Param1.getUTF16Length());
                SN::CALLBACK_METHOD_ID = methodId;
                if(!SN::listener)
																{
                    PA_RunInMainProcess((PA_RunInMainProcessProcPtr)listenerLoopStart, NULL);
                }
            }
								}
				}
	
				[methodName release];

				returnValue.setReturn(pResult);
}

void SN_Get_sleep_method(sLONG_PTR *pResult, PackagePtr pParams)
{
				SN::LISTENER_METHOD.setReturn(pResult);
}

// ---------------------------------- Information ---------------------------------

void Get_battery_warning_level(sLONG_PTR *pResult, PackagePtr pParams)
{
				C_LONGINT returnValue;

				IOPSLowBatteryWarningLevel warningLevel = IOPSGetBatteryWarningLevel();

				if(warningLevel)
				{
								returnValue.setIntValue((int)warningLevel);
				}

				returnValue.setReturn(pResult);
}

void GET_POWER_INFORMATION(sLONG_PTR *pResult, PackagePtr pParams)
{
				ARRAY_TEXT Param1;
				Param1.setSize(1);
				
				CFTypeRef powerSourcesInfo = IOPSCopyPowerSourcesInfo();
	
				if(powerSourcesInfo)
				{
								NSArray *powerSourcesList = (NSArray *)IOPSCopyPowerSourcesList(powerSourcesInfo);
								if(powerSourcesList)
								{
											for(NSUInteger i = 0; i < [powerSourcesList count]; ++i)
												{
																NSDictionary *powerSourcesDescription = (NSDictionary *)
																IOPSGetPowerSourceDescription(powerSourcesInfo, [powerSourcesList objectAtIndex:i]);
																if(powerSourcesDescription)
																{
																				NSString *powerSourcesDescriptionXML = copyDictionaryString(powerSourcesDescription);
																				if(powerSourcesDescriptionXML)
																				{
																								Param1.appendUTF16String(powerSourcesDescriptionXML);
																								[powerSourcesDescriptionXML release];
																				}
																}
												}
												[powerSourcesList release];
								}
				}
				
				NSDictionary *powerAdapterDetails = (NSDictionary *)IOPSCopyExternalPowerAdapterDetails();
				
				if(powerAdapterDetails)
				{
								NSString *powerAdapterDetailsXML = copyDictionaryString(powerAdapterDetails);

								if(powerAdapterDetailsXML)
								{
												Param1.appendUTF16String(powerAdapterDetailsXML);
												[powerAdapterDetailsXML release];
								}
								[powerAdapterDetails release];
				}
				
				Param1.toParamAtIndex(pParams, 1);
}

